'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection



<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="ArtsDB")> _
Partial Public Class ArtsDataClassDataContext
    Inherits System.Data.Linq.DataContext

    Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertArt(ByVal instance As Art)
  End Sub
  Partial Private Sub UpdateArt(ByVal instance As Art)
  End Sub
  Partial Private Sub DeleteArt(ByVal instance As Art)
  End Sub
  #End Region

    Public Sub New()
        MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("ArtsDBConnectionString").ConnectionString, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As String)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As System.Data.IDbConnection)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public ReadOnly Property Arts() As System.Data.Linq.Table(Of Art)
        Get
            Return Me.GetTable(Of Art)()
        End Get
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Arts")> _
Partial Public Class Art
    Implements INotifyPropertyChanging, INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

    Private _LastWriteTime? As Date

    Private _Name As String

    Private _ID As Integer

    Private _ParentID? As Integer

    Private _IsFolder? As Boolean

    Private _Data As System.Data.Linq.Binary

    Private _OptimisticLockField? As Integer

    Private _GCRecord? As Integer

    Private _SSMA_TimeStamp As System.Data.Linq.Binary

    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLastWriteTimeChanging(ByVal value? As Date)
    End Sub
    Partial Private Sub OnLastWriteTimeChanged()
    End Sub
    Partial Private Sub OnNameChanging(ByVal value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnIDChanging(ByVal value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnParentIDChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnParentIDChanged()
    End Sub
    Partial Private Sub OnIsFolderChanging(ByVal value? As Boolean)
    End Sub
    Partial Private Sub OnIsFolderChanged()
    End Sub
    Partial Private Sub OnDataChanging(ByVal value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnDataChanged()
    End Sub
    Partial Private Sub OnOptimisticLockFieldChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnOptimisticLockFieldChanged()
    End Sub
    Partial Private Sub OnGCRecordChanging(ByVal value? As Integer)
    End Sub
    Partial Private Sub OnGCRecordChanged()
    End Sub
    Partial Private Sub OnSSMA_TimeStampChanging(ByVal value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnSSMA_TimeStampChanged()
    End Sub
    #End Region

    Public Sub New()
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastWriteTime", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)> _
    Public Property LastWriteTime() As Date?
        Get
            Return Me._LastWriteTime
        End Get
        Set(ByVal value? As Date)
            If (Not Me._LastWriteTime.Equals(value)) Then
                Me.OnLastWriteTimeChanging(value)
                Me.SendPropertyChanging()
                Me._LastWriteTime = value
                Me.SendPropertyChanged("LastWriteTime")
                Me.OnLastWriteTimeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(100)", UpdateCheck:=UpdateCheck.Never)> _
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set(ByVal value As String)
            If (Me._Name <> value) Then
                Me.OnNameChanging(value)
                Me.SendPropertyChanging()
                Me._Name = value
                Me.SendPropertyChanged("Name")
                Me.OnNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True, UpdateCheck:=UpdateCheck.Never)> _
    Public Property ID() As Integer
        Get
            Return Me._ID
        End Get
        Set(ByVal value As Integer)
            If (Me._ID <> value) Then
                Me.OnIDChanging(value)
                Me.SendPropertyChanging()
                Me._ID = value
                Me.SendPropertyChanged("ID")
                Me.OnIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentID", DbType:="Int", UpdateCheck:=UpdateCheck.Never)> _
    Public Property ParentID() As Integer?
        Get
            Return Me._ParentID
        End Get
        Set(ByVal value? As Integer)
            If (Not Me._ParentID.Equals(value)) Then
                Me.OnParentIDChanging(value)
                Me.SendPropertyChanging()
                Me._ParentID = value
                Me.SendPropertyChanged("ParentID")
                Me.OnParentIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsFolder", DbType:="Bit", UpdateCheck:=UpdateCheck.Never)> _
    Public Property IsFolder() As Boolean?
        Get
            Return Me._IsFolder
        End Get
        Set(ByVal value? As Boolean)
            If (Not Me._IsFolder.Equals(value)) Then
                Me.OnIsFolderChanging(value)
                Me.SendPropertyChanging()
                Me._IsFolder = value
                Me.SendPropertyChanged("IsFolder")
                Me.OnIsFolderChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Data", DbType:="VarBinary(MAX)", CanBeNull:=True, UpdateCheck:=UpdateCheck.Never)> _
    Public Property Data() As System.Data.Linq.Binary
        Get
            Return Me._Data
        End Get
        Set(ByVal value As System.Data.Linq.Binary)
            If (Me._Data <> value) Then
                Me.OnDataChanging(value)
                Me.SendPropertyChanging()
                Me._Data = value
                Me.SendPropertyChanged("Data")
                Me.OnDataChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OptimisticLockField", DbType:="Int", UpdateCheck:=UpdateCheck.Never)> _
    Public Property OptimisticLockField() As Integer?
        Get
            Return Me._OptimisticLockField
        End Get
        Set(ByVal value? As Integer)
            If (Not Me._OptimisticLockField.Equals(value)) Then
                Me.OnOptimisticLockFieldChanging(value)
                Me.SendPropertyChanging()
                Me._OptimisticLockField = value
                Me.SendPropertyChanged("OptimisticLockField")
                Me.OnOptimisticLockFieldChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GCRecord", DbType:="Int", UpdateCheck:=UpdateCheck.Never)> _
    Public Property GCRecord() As Integer?
        Get
            Return Me._GCRecord
        End Get
        Set(ByVal value? As Integer)
            If (Not Me._GCRecord.Equals(value)) Then
                Me.OnGCRecordChanging(value)
                Me.SendPropertyChanging()
                Me._GCRecord = value
                Me.SendPropertyChanged("GCRecord")
                Me.OnGCRecordChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SSMA_TimeStamp", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=False, IsDbGenerated:=True, IsVersion:=True, UpdateCheck:=UpdateCheck.Never)> _
    Public Property SSMA_TimeStamp() As System.Data.Linq.Binary
        Get
            Return Me._SSMA_TimeStamp
        End Get
        Set(ByVal value As System.Data.Linq.Binary)
            If (Me._SSMA_TimeStamp <> value) Then
                Me.OnSSMA_TimeStampChanging(value)
                Me.SendPropertyChanging()
                Me._SSMA_TimeStamp = value
                Me.SendPropertyChanged("SSMA_TimeStamp")
                Me.OnSSMA_TimeStampChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub
End Class
'#pragma warning restore 1591
